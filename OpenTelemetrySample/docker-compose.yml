version: '3.4'

services:
  webapplication:
    image: ${DOCKER_REGISTRY-}webapplication
    build:
      context: .
      dockerfile: WebApplication/Dockerfile
    ports:
      - "49166:80"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s      
      
  zipkin-all-in-one:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
        
        
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - "14250:14250"
      - "5778:5778"
      - "16686:16686"

  prometheus:
      container_name: prometheus
      image: prom/prometheus:latest
      #    volumes:
      #      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
      volumes:
        - type: bind
          source: ./prometheus/config/prometheus.yml
          target: /etc/prometheus/prometheus.yml
          read_only: true
        - type: volume
          source: prometheus
          target: /prometheus
      labels:
        org.label-schema.group: "monitoring"
      ports:
        - "9090:9090"

  grafana:
      image: grafana/grafana:latest
      ports:
        - "3000:3000"
      volumes:
        - type: bind
          source: ./grafana/config/grafana.ini
          target: /etc/grafana/grafana.ini
        - type: bind
          source: ./grafana/provisioning/dashboards
          target: /etc/grafana/provisioning/dashboards
        - type: bind
          source: ./grafana/provisioning/datasources
          target: /etc/grafana/provisioning/datasources
        - type: volume
          source: grafana
          target: /var/lib/grafana
      depends_on:
        - prometheus
      labels:
        org.label-schema.group: "monitoring"
        
        
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    ports:
      - "8200:8200"
      - "9200:9200"
      - "9300:9300"
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx1024m -Xms1024m"
      # ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    labels:
      org.label-schema.group: "logging"      

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.2
    ports:
      - "5601:5601"
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    depends_on:
      - elasticsearch
    labels:
      org.label-schema.group: "logging"

  otel-collector:
      image: otel/opentelemetry-collector-contrib:0.40.0
      command: [ "--config=/etc/otel-collector-config.yaml" ]
      volumes:
        - ./output:/etc/output:rw
        - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      ports:
        - "8888:8888"   # Prometheus metrics exposed by the collector
        - "8889:8889"   # Prometheus exporter metrics
        - "4317:4317"   # OTLP gRPC receiver
        - "13133:13133" # Health Checks
      depends_on:
        - zipkin-all-in-one
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:13133" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 15s

volumes:
  elasticsearch:
  prometheus:
  grafana: